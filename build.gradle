import com.install4j.gradle.Install4jTask
import de.undercouch.gradle.tasks.download.Download
import groovy.json.JsonSlurper
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.Method
import groovyx.net.http.ParserRegistry 

buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://maven.ej-technologies.com/repository' }
    maven { url 'http://repo.spring.io/plugins-release' }
  }

  dependencies {
    classpath("gradle.plugin.install4j.install4j:gradle_plugin:7.0.7")
    classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsVersion}")
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:${coverallsGradlePluginVersion}")
  }
}

plugins {
  id "com.install4j.gradle" version "7.0.7"
  id "co.riiid.gradle" version "0.4.2"
  id "de.undercouch.download" version "3.4.3"
  id "io.franzbecker.gradle-lombok" version "1.14"
  id 'net.ltgt.apt' version '0.19'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'propdeps'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'distribution'

sourceCompatibility = 1.11
targetCompatibility = 1.11

allprojects {
  repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.ej-technologies.com/repository' }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
    maven { url "http://maven.teamdev.com/repository/products" }
    maven { url  "https://dl.bintray.com/supcomhub/maven-public" }
  }

  apply plugin: 'java'
  apply plugin: 'idea'
  idea.module.outputDir file("out/production/classes")

  group = 'org.supcomhub.client'
  // Version has to be passed at build time from command line
  version = "${version}"

  sourceCompatibility = 1.11
  targetCompatibility = 1.11

  dependencies {
    compileOnly("org.jetbrains:annotations:16.0.3")
    testCompileOnly("org.jetbrains:annotations:16.0.3")

    // Mind that Lombok doesn't work with modularized code yet. See https://github.com/rzwitserloot/lombok/issues/1723
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    implementation("com.github.micheljung:nocatch:${noCatchVersion}")
  }
}

// These are read from gradle.properties
version "${version}"

bootJar.enabled = false
jar.enabled = true


compileJava.dependsOn(processResources)
processResources {
  filesMatching('**/application.yml') {
    filter {
      it.replace('#faf-server.version#', project.version.toString())
    }
  }
}

configurations {
  compile.exclude module: "assertj-core"
}

lombok {
  version = "${lombokVersion}"
  sha256 = ""
}

class HttpBuilder extends HTTPBuilder {

  HttpBuilder(String url) {
    super(url)
    this.parser.'text/json' = { resp ->
      def bufferedText = resp.entity.content.getText(ParserRegistry.getCharset(resp)).trim()
      return new JsonSlurper().parseText(bufferedText)
    }
    this.parser.'application/json' = this.parser.'text/json'
  }
}

def httpRequest(Method method, String url, onSuccess) {
  def http = new HttpBuilder(url)

  http.request(method) {
    requestContentType = ContentType.JSON

    headers.'User-Agent' = 'downlords-faf-client-gradle'
    headers.'Authorization' = "token ${project.github.token}"
    headers.'Accept' = 'application/vnd.github.v3+json'

    response.success = onSuccess

    response.failure = { resp, json ->
      logger.debug 'Response headers: \n' + resp.headers.collect { "< $it" }.join('\n')
      def errorMessage = json ? json.message : resp.statusLine
      def ref = json ? "See $json.documentation_url" : ''
      def errorDetails = json && json.errors ? "Details: " + json.errors.collect { it }.join('\n') : ''
      throw new GradleScriptException("$errorMessage. $ref. $errorDetails", null)
    }
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true
  }
}

configurations {
  codacy
}

jar {
  manifest {
    attributes "Main-Class": "com.faforever.client.FafClientApplication",
        "Implementation-Title": "Downlord's FAF Client",
        "Implementation-Version": version,
        "Implementation-Vendor": "Downlord"
  }
}

distributions {
  main {
    contents {
      from {
        [
            configurations.runtime,
            jar,
            unpackIceAdapter.outputs.files,
            downloadIceAdapterLinux.outputs.files,
            downloadUnixUid.outputs.files,
            downloadWindowsUid.outputs.files
        ]
      }
      exclude('**/i4jruntime*.jar')
    }
  }
}

install4j {
  if (project.hasProperty('install4jHomeDir')) {
    installDir = file(install4jHomeDir)
  }
  if (project.hasProperty('install4jLicense')) {
    license = install4jLicense
  }
}

println "Building for JavaFX platform: ${javafxPlatform}"
task buildInstall4jMediaFiles(type: Install4jTask) {
  group "distribution"
  description 'Creates install4j media files'
  dependsOn 'installDist'

  projectFile = file('downlords-faf-client.install4j')
  release = version

  switch (project.ext.javafxPlatform) {
    case "linux":
      mediaTypes = ['unixInstaller', 'unixArchive']
      break
    case "mac":
      mediaTypes = ['macos', 'macosFolder', 'macosArchive', 'macosFolderArchive']
      break
    case "win":
      mediaTypes = ['windows', 'windowsArchive']
      break
  }

  doFirst {
    println "Building version ${version}"
    if (!project.hasProperty('install4jHomeDir')) {
      throw new RuntimeException('Specify install4jHomeDir in gradle.properties and set it to an install4j installation directory')
    }
  }
}

task downloadIceAdapter(type: Download) {
  group "native dependencies"
  src "https://github.com/FAForever/ice-adapter/releases/download/v${faf_ice_adapter_version}/faf-ice-adapter-win32.zip"
  dest file("${buildDir}/tmp/faf-ice-adapter.zip")
  onlyIfNewer true
}

task downloadIceAdapterLinux(type: Download) {
  group "native dependencies"
  src "https://github.com/FAForever/ice-adapter/releases/download/v${faf_ice_adapter_version}/faf-ice-adapter-linux64.tar.gz"
  dest file("${buildDir}/tmp/faf-ice-adapter-linux.tar.gz")
  onlyIfNewer true
}

task unpackIceAdapter(type: Copy, dependsOn: downloadIceAdapter) {
  group "native dependencies"
  from zipTree(downloadIceAdapter.outputs.files.singleFile)
  into file("${buildDir}/resources/native")
}

task unpackIceAdapterLinux(type: Copy, dependsOn: downloadIceAdapterLinux) {
  group "native dependencies"
  from tarTree(resources.gzip(downloadIceAdapterLinux.outputs.files.singleFile))
  into file("${buildDir}/resources/native")
}

task downloadUnixUid(type: Download) {
  group "native dependencies"
  src "https://github.com/FAForever/uid/releases/download/v${faf_uid_version}/faf-uid"
  dest file("${buildDir}/resources/native/faf-uid")
  onlyIfNewer true
}

task downloadWindowsUid(type: Download) {
  group "native dependencies"
  src "https://github.com/FAForever/uid/releases/download/v${faf_uid_version}/faf-uid.exe"
  dest file("${buildDir}/resources/native/faf-uid.exe")
  onlyIfNewer true
}

task downloadNativeDependencies(dependsOn: [unpackIceAdapter, downloadUnixUid, downloadWindowsUid, unpackIceAdapterLinux]) {
  group "native dependencies"
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = ["-l", "Java", "-r", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}


jacoco {
  toolVersion = "${jacocoVersion}"
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter")
  compile("org.springframework.boot:spring-boot-starter-cache")
  compile("org.springframework.boot:spring-boot-starter-logging")
  compile("org.springframework.boot:spring-boot-starter-websocket")
  compile("org.springframework.boot:spring-boot-starter-integration")
  compile("org.springframework.integration:spring-integration-ip")
  compile("org.springframework.integration:spring-integration-websocket")
  compile("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:${springSecurityOauth2AutoconfigureVersion}")
  compile("org.springframework:spring-web")

  compile("com.github.FAForever:faf-java-commons:${fafCommonsVersion}")
  compile("com.google.guava:guava:${guavaVersion}")
  compile("commons-validator:commons-validator:1.6")
  compile("javax.inject:javax.inject:1")
  compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatatypeJsr310Version}")
  compile("javax.annotation:javax.annotation-api:1.3.1")

  compile project(":service")
  compile project(":webview-patch")
  compile("org.javassist:javassist:${project.ext['javassist.version']}")

  optional("org.springframework.boot:spring-boot-configuration-processor")

  codacy("com.github.codacy:codacy-coverage-reporter:-SNAPSHOT")
}
